
Pir_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800062  00800062  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002e2  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000170  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fd  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a2  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec ea       	ldi	r30, 0xAC	; 172
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 37       	cpi	r26, 0x7A	; 122
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	af d1       	rcall	.+862    	; 0x3a2 <main>
  44:	b1 c1       	rjmp	.+866    	; 0x3a8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:


//Free running ADC interrupt;

ISR(ADC_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	8f 93       	push	r24
  58:	ef 93       	push	r30
  5a:	ff 93       	push	r31
	static unsigned char inputIndex=0;
	//Read the AD conversion result;
	adcScanningData[inputIndex]=ADCW;
  5c:	80 91 62 00 	lds	r24, 0x0062
  60:	e8 2f       	mov	r30, r24
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	24 b1       	in	r18, 0x04	; 4
  66:	35 b1       	in	r19, 0x05	; 5
  68:	ee 0f       	add	r30, r30
  6a:	ff 1f       	adc	r31, r31
  6c:	ec 58       	subi	r30, 0x8C	; 140
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	31 83       	std	Z+1, r19	; 0x01
  72:	20 83       	st	Z, r18
	//Select next ADC input;
	if (++inputIndex > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	18 f4       	brcc	.+6      	; 0x80 <__vector_9+0x38>
  7a:	80 93 62 00 	sts	0x0062, r24
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__vector_9+0x3c>
	inputIndex=0;
  80:	10 92 62 00 	sts	0x0062, r1
	ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+inputIndex;
  84:	80 91 62 00 	lds	r24, 0x0062
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <__vector_9+0x46>
	//Delay needed for the stabilization of the ADC input voltage;
	_delay_us(10);
	//Start the AD conversion;
	ADCSRA|=(1<<ADSC); //ADCSRA|=0x40
  92:	36 9a       	sbi	0x06, 6	; 6
}
  94:	ff 91       	pop	r31
  96:	ef 91       	pop	r30
  98:	8f 91       	pop	r24
  9a:	3f 91       	pop	r19
  9c:	2f 91       	pop	r18
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_6>:

//Timer0 compare interrupt;

ISR (TIM0_COMPA_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	//Counter for light switch - is 25 milliseconds;
	const short INTERRUPT_DELAY = 25;
	static unsigned char acNetCounter = INTERRUPT_DELAY;
	
	if(PINB & (1<<AC_SWITCH))
  ba:	b1 9b       	sbis	0x16, 1	; 22
  bc:	0e c0       	rjmp	.+28     	; 0xda <__vector_6+0x32>
	{
		//Read 1 state - switch is active;
		//Time checking;
		if(acNetCounter)
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	88 23       	and	r24, r24
  c4:	21 f0       	breq	.+8      	; 0xce <__vector_6+0x26>
		{
			//Time is not run;
			acNetCounter --;
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	80 93 60 00 	sts	0x0060, r24
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <__vector_6+0x3e>
		}
		else
		{
			//15 mseconds switch is on;
			keyFlag = 0;
  ce:	10 92 6b 00 	sts	0x006B, r1
			//Set the counter again;
			acNetCounter = INTERRUPT_DELAY;
  d2:	89 e1       	ldi	r24, 0x19	; 25
  d4:	80 93 60 00 	sts	0x0060, r24
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <__vector_6+0x3e>
		}
	}
	else
	{
		//Read 0 - Switch is on;
		keyFlag = 1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 6b 00 	sts	0x006B, r24
		//Set the counter again;
		acNetCounter = INTERRUPT_DELAY;
  e0:	89 e1       	ldi	r24, 0x19	; 25
  e2:	80 93 60 00 	sts	0x0060, r24
	}
	//Start with switch / debounnce;
	if (keyFlag)
  e6:	80 91 6b 00 	lds	r24, 0x006B
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <__vector_6+0x48>
  ee:	69 c0       	rjmp	.+210    	; 0x1c2 <__vector_6+0x11a>
	{
		timeCounter++;
  f0:	80 91 6e 00 	lds	r24, 0x006E
  f4:	90 91 6f 00 	lds	r25, 0x006F
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 6f 00 	sts	0x006F, r25
  fe:	80 93 6e 00 	sts	0x006E, r24

		if (timeCounter>=DEBOUNCE)
 102:	80 91 6e 00 	lds	r24, 0x006E
 106:	90 91 6f 00 	lds	r25, 0x006F
 10a:	80 3d       	cpi	r24, 0xD0	; 208
 10c:	97 40       	sbci	r25, 0x07	; 7
 10e:	08 f4       	brcc	.+2      	; 0x112 <__vector_6+0x6a>
 110:	6c c0       	rjmp	.+216    	; 0x1ea <__vector_6+0x142>
		{
			timeCounter = DEBOUNCE;
 112:	80 ed       	ldi	r24, 0xD0	; 208
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	90 93 6f 00 	sts	0x006F, r25
 11a:	80 93 6e 00 	sts	0x006E, r24
			milliSeconds++;
 11e:	80 91 69 00 	lds	r24, 0x0069
 122:	90 91 6a 00 	lds	r25, 0x006A
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 6a 00 	sts	0x006A, r25
 12c:	80 93 69 00 	sts	0x0069, r24

			if (milliSeconds==MILLISECONDS_IN_SECONDS)
 130:	80 91 69 00 	lds	r24, 0x0069
 134:	90 91 6a 00 	lds	r25, 0x006A
 138:	87 3e       	cpi	r24, 0xE7	; 231
 13a:	93 40       	sbci	r25, 0x03	; 3
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_6+0x98>
 13e:	55 c0       	rjmp	.+170    	; 0x1ea <__vector_6+0x142>
			{
				milliSeconds=0;
 140:	10 92 6a 00 	sts	0x006A, r1
 144:	10 92 69 00 	sts	0x0069, r1
				seconds++;
 148:	80 91 67 00 	lds	r24, 0x0067
 14c:	90 91 68 00 	lds	r25, 0x0068
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 68 00 	sts	0x0068, r25
 156:	80 93 67 00 	sts	0x0067, r24

				if (seconds==SECONDS_IN_MINUTES)
 15a:	80 91 67 00 	lds	r24, 0x0067
 15e:	90 91 68 00 	lds	r25, 0x0068
 162:	cb 97       	sbiw	r24, 0x3b	; 59
 164:	09 f0       	breq	.+2      	; 0x168 <__vector_6+0xc0>
 166:	41 c0       	rjmp	.+130    	; 0x1ea <__vector_6+0x142>
				{
					seconds=0;
 168:	10 92 68 00 	sts	0x0068, r1
 16c:	10 92 67 00 	sts	0x0067, r1
					minutes++;
 170:	80 91 65 00 	lds	r24, 0x0065
 174:	90 91 66 00 	lds	r25, 0x0066
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 66 00 	sts	0x0066, r25
 17e:	80 93 65 00 	sts	0x0065, r24

					if (minutes==MINUTES_IN_HOURS)
 182:	80 91 65 00 	lds	r24, 0x0065
 186:	90 91 66 00 	lds	r25, 0x0066
 18a:	cb 97       	sbiw	r24, 0x3b	; 59
 18c:	71 f5       	brne	.+92     	; 0x1ea <__vector_6+0x142>
					{
						minutes=0;
 18e:	10 92 66 00 	sts	0x0066, r1
 192:	10 92 65 00 	sts	0x0065, r1
						hours++;
 196:	80 91 63 00 	lds	r24, 0x0063
 19a:	90 91 64 00 	lds	r25, 0x0064
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 64 00 	sts	0x0064, r25
 1a4:	80 93 63 00 	sts	0x0063, r24
					
						if (hours > AC_SWITCHOFF_DELAY)
 1a8:	80 91 63 00 	lds	r24, 0x0063
 1ac:	90 91 64 00 	lds	r25, 0x0064
 1b0:	06 97       	sbiw	r24, 0x06	; 6
 1b2:	d8 f0       	brcs	.+54     	; 0x1ea <__vector_6+0x142>
						{
							hours=CONSTANT_FOR_HOURS;
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 64 00 	sts	0x0064, r25
 1bc:	80 93 63 00 	sts	0x0063, r24
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <__vector_6+0x142>
			}
		}
	}
	else
	{
		milliSeconds=0; seconds=0, minutes=0, hours=0; timeCounter=0;  
 1c2:	10 92 6a 00 	sts	0x006A, r1
 1c6:	10 92 69 00 	sts	0x0069, r1
 1ca:	10 92 68 00 	sts	0x0068, r1
 1ce:	10 92 67 00 	sts	0x0067, r1
 1d2:	10 92 66 00 	sts	0x0066, r1
 1d6:	10 92 65 00 	sts	0x0065, r1
 1da:	10 92 64 00 	sts	0x0064, r1
 1de:	10 92 63 00 	sts	0x0063, r1
 1e2:	10 92 6f 00 	sts	0x006F, r1
 1e6:	10 92 6e 00 	sts	0x006E, r1
	}

	//Switch on delay and Pir sensor debounce;
	if ((!(PINB & (1<<PIR))) && (keyFlag==0)&&(photoSeensor>=sensivity))
 1ea:	b0 99       	sbic	0x16, 0	; 22
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <__vector_6+0x178>
 1ee:	80 91 6b 00 	lds	r24, 0x006B
 1f2:	81 11       	cpse	r24, r1
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <__vector_6+0x178>
 1f6:	20 91 72 00 	lds	r18, 0x0072
 1fa:	30 91 73 00 	lds	r19, 0x0073
 1fe:	80 91 78 00 	lds	r24, 0x0078
 202:	90 91 79 00 	lds	r25, 0x0079
 206:	28 17       	cp	r18, r24
 208:	39 07       	cpc	r19, r25
 20a:	50 f0       	brcs	.+20     	; 0x220 <__vector_6+0x178>
			on++;
 20c:	80 91 70 00 	lds	r24, 0x0070
 210:	90 91 71 00 	lds	r25, 0x0071
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 71 00 	sts	0x0071, r25
 21a:	80 93 70 00 	sts	0x0070, r24
 21e:	04 c0       	rjmp	.+8      	; 0x228 <__vector_6+0x180>
	else	on=0;
 220:	10 92 71 00 	sts	0x0071, r1
 224:	10 92 70 00 	sts	0x0070, r1
	
	if ((!(PINB & (1<<PIR))) && (photoSeensor<sensivity) && ((PINB & (1<<BULB))))
 228:	b0 99       	sbic	0x16, 0	; 22
 22a:	17 c0       	rjmp	.+46     	; 0x25a <__vector_6+0x1b2>
 22c:	20 91 72 00 	lds	r18, 0x0072
 230:	30 91 73 00 	lds	r19, 0x0073
 234:	80 91 78 00 	lds	r24, 0x0078
 238:	90 91 79 00 	lds	r25, 0x0079
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	60 f4       	brcc	.+24     	; 0x25a <__vector_6+0x1b2>
 242:	b3 9b       	sbis	0x16, 3	; 22
 244:	0a c0       	rjmp	.+20     	; 0x25a <__vector_6+0x1b2>
			timeCounterDown++;
 246:	80 91 6c 00 	lds	r24, 0x006C
 24a:	90 91 6d 00 	lds	r25, 0x006D
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 6d 00 	sts	0x006D, r25
 254:	80 93 6c 00 	sts	0x006C, r24
 258:	04 c0       	rjmp	.+8      	; 0x262 <__vector_6+0x1ba>
	else    timeCounterDown = 0;
 25a:	10 92 6d 00 	sts	0x006D, r1
 25e:	10 92 6c 00 	sts	0x006C, r1
	//Reset the counter;
	TCNT0=0x00;
 262:	12 be       	out	0x32, r1	; 50
}
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <MCU_init>:

void MCU_init (void)
{
	//Crystal Oscillator division factor: 1;
	#pragma optsize-
	CLKPR=(1<<CLKPCE);
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	86 bd       	out	0x26, r24	; 38
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
 27a:	16 bc       	out	0x26, r1	; 38
	#endif

	//Input/Output Ports initialization;
	//Port B initialization;
	//Function: Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In;
	DDRB=(0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	87 bb       	out	0x17, r24	; 23
	// State: Bit5=T Bit4=P Bit3=1 Bit2=T Bit1=P Bit0=T;
	PORTB=(0<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
 280:	83 e1       	ldi	r24, 0x13	; 19
 282:	88 bb       	out	0x18, r24	; 24
	//ADC initialization;
	//ADC Clock frequency: 150,000 kHz;
	//ADC Bandgap Voltage Reference: Off;
	//ADC Auto Trigger Source: Free Running;
	//Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On;
	DIDR0=(0<<ADC0D) | (0<<ADC2D) | (0<<ADC3D) | (0<<ADC1D);
 284:	14 ba       	out	0x14, r1	; 20
	ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
 28a:	8e ee       	ldi	r24, 0xEE	; 238
 28c:	86 b9       	out	0x06, r24	; 6
	ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 28e:	13 b8       	out	0x03, r1	; 3
	//Timer/Counter 0 initialization;
	//Clock source: System Clock;
	//Clock value: 150,000 kHz;
	//Mode: CTC top=OCR0A;
	//Timer Period: 1 ms;
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	8f bd       	out	0x2f, r24	; 47
	TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 298:	12 be       	out	0x32, r1	; 50
	OCR0A=0x95;
 29a:	85 e9       	ldi	r24, 0x95	; 149
 29c:	86 bf       	out	0x36, r24	; 54
	OCR0B=0x00;
 29e:	19 bc       	out	0x29, r1	; 41

	//Timer/Counter 0 Interrupt(s) initialization;
	TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	89 bf       	out	0x39, r24	; 57

	sei ();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <AdcInputsread>:
}

void AdcInputsread (void)
{
	//First channel value, PORTB2;
	photoSeensor=adcScanningData[0];
 2a8:	e4 e7       	ldi	r30, 0x74	; 116
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	90 93 73 00 	sts	0x0073, r25
 2b4:	80 93 72 00 	sts	0x0072, r24
	//Second channel value, PORTB4;
	sensivity=adcScanningData[1];
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	90 93 79 00 	sts	0x0079, r25
 2c0:	80 93 78 00 	sts	0x0078, r24
 2c4:	08 95       	ret

000002c6 <MainLogic>:
}

void MainLogic (void)
{
 2c6:	cf 93       	push	r28
	//Switch state
	unsigned char switchOn;
	//Forbid global interrupts;
	cli ();
 2c8:	f8 94       	cli
	switchOn = keyFlag;
 2ca:	c0 91 6b 00 	lds	r28, 0x006B
	//Allow global interrupts;
	sei ();
 2ce:	78 94       	sei
	// ADC read function(10bit);
	AdcInputsread();
 2d0:	eb df       	rcall	.-42     	; 0x2a8 <AdcInputsread>
	//AC switch priority;
	while (switchOn && (timeCounter>=DEBOUNCE) && (hours<AC_SWITCHOFF_DELAY))
 2d2:	cc 23       	and	r28, r28
 2d4:	e9 f0       	breq	.+58     	; 0x310 <MainLogic+0x4a>
 2d6:	80 91 6e 00 	lds	r24, 0x006E
 2da:	90 91 6f 00 	lds	r25, 0x006F
 2de:	80 3d       	cpi	r24, 0xD0	; 208
 2e0:	97 40       	sbci	r25, 0x07	; 7
 2e2:	b0 f0       	brcs	.+44     	; 0x310 <MainLogic+0x4a>
 2e4:	80 91 63 00 	lds	r24, 0x0063
 2e8:	90 91 64 00 	lds	r25, 0x0064
 2ec:	05 97       	sbiw	r24, 0x05	; 5
 2ee:	08 f4       	brcc	.+2      	; 0x2f2 <MainLogic+0x2c>
 2f0:	54 c0       	rjmp	.+168    	; 0x39a <MainLogic+0xd4>
 2f2:	0e c0       	rjmp	.+28     	; 0x310 <MainLogic+0x4a>
 2f4:	80 91 6e 00 	lds	r24, 0x006E
 2f8:	90 91 6f 00 	lds	r25, 0x006F
 2fc:	80 3d       	cpi	r24, 0xD0	; 208
 2fe:	97 40       	sbci	r25, 0x07	; 7
 300:	38 f0       	brcs	.+14     	; 0x310 <MainLogic+0x4a>
 302:	80 91 63 00 	lds	r24, 0x0063
 306:	90 91 64 00 	lds	r25, 0x0064
 30a:	05 97       	sbiw	r24, 0x05	; 5
 30c:	08 f4       	brcc	.+2      	; 0x310 <MainLogic+0x4a>
 30e:	43 c0       	rjmp	.+134    	; 0x396 <MainLogic+0xd0>
	{
		PORTB |=(1<<BULB);
	}
	
		//PIR=0,Switch=1;
		if ((photoSeensor>=sensivity) && (!(PINB & (1<<PIR)))  && (on>=PIRDELAY))
 310:	20 91 72 00 	lds	r18, 0x0072
 314:	30 91 73 00 	lds	r19, 0x0073
 318:	80 91 78 00 	lds	r24, 0x0078
 31c:	90 91 79 00 	lds	r25, 0x0079
 320:	28 17       	cp	r18, r24
 322:	39 07       	cpc	r19, r25
 324:	58 f0       	brcs	.+22     	; 0x33c <MainLogic+0x76>
 326:	b0 99       	sbic	0x16, 0	; 22
 328:	09 c0       	rjmp	.+18     	; 0x33c <MainLogic+0x76>
 32a:	80 91 70 00 	lds	r24, 0x0070
 32e:	90 91 71 00 	lds	r25, 0x0071
 332:	88 3b       	cpi	r24, 0xB8	; 184
 334:	9b 40       	sbci	r25, 0x0B	; 11
 336:	10 f0       	brcs	.+4      	; 0x33c <MainLogic+0x76>
		{
			//Out is log 1;
			PORTB |=(1<<BULB);
 338:	c3 9a       	sbi	0x18, 3	; 24
 33a:	31 c0       	rjmp	.+98     	; 0x39e <MainLogic+0xd8>
		}

			else if ((!(PINB & (1<<PIR))) && (photoSeensor<sensivity) &&
 33c:	b0 99       	sbic	0x16, 0	; 22
 33e:	16 c0       	rjmp	.+44     	; 0x36c <MainLogic+0xa6>
 340:	20 91 72 00 	lds	r18, 0x0072
 344:	30 91 73 00 	lds	r19, 0x0073
 348:	80 91 78 00 	lds	r24, 0x0078
 34c:	90 91 79 00 	lds	r25, 0x0079
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	58 f4       	brcc	.+22     	; 0x36c <MainLogic+0xa6>
 356:	b3 9b       	sbis	0x16, 3	; 22
 358:	09 c0       	rjmp	.+18     	; 0x36c <MainLogic+0xa6>
					(PINB & (1<<BULB)) && (timeCounterDown>PHOTOOFFSET))
 35a:	80 91 6c 00 	lds	r24, 0x006C
 35e:	90 91 6d 00 	lds	r25, 0x006D
 362:	89 38       	cpi	r24, 0x89	; 137
 364:	93 41       	sbci	r25, 0x13	; 19
 366:	10 f0       	brcs	.+4      	; 0x36c <MainLogic+0xa6>

			{
						PORTB &=~(1<<BULB);
 368:	c3 98       	cbi	0x18, 3	; 24
 36a:	19 c0       	rjmp	.+50     	; 0x39e <MainLogic+0xd8>
			}
	
				else if ((!(PINB & (1<<PIR))) && (!switchOn||switchOn) &&
 36c:	b0 99       	sbic	0x16, 0	; 22
 36e:	0f c0       	rjmp	.+30     	; 0x38e <MainLogic+0xc8>
						(photoSeensor>=sensivity) && ((PINB & (1<<BULB))))
 370:	20 91 72 00 	lds	r18, 0x0072
 374:	30 91 73 00 	lds	r19, 0x0073
 378:	80 91 78 00 	lds	r24, 0x0078
 37c:	90 91 79 00 	lds	r25, 0x0079

			{
						PORTB &=~(1<<BULB);
			}
	
				else if ((!(PINB & (1<<PIR))) && (!switchOn||switchOn) &&
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	20 f0       	brcs	.+8      	; 0x38e <MainLogic+0xc8>
						(photoSeensor>=sensivity) && ((PINB & (1<<BULB))))
 386:	b3 9b       	sbis	0x16, 3	; 22
 388:	02 c0       	rjmp	.+4      	; 0x38e <MainLogic+0xc8>

				{
							PORTB |=(1<<PINB3);
 38a:	c3 9a       	sbi	0x18, 3	; 24
 38c:	08 c0       	rjmp	.+16     	; 0x39e <MainLogic+0xd8>
				}

					else if (PINB & (1<<PIR))
 38e:	b0 9b       	sbis	0x16, 0	; 22
 390:	06 c0       	rjmp	.+12     	; 0x39e <MainLogic+0xd8>
						{
							PORTB &=~(1<<BULB);
 392:	c3 98       	cbi	0x18, 3	; 24
 394:	04 c0       	rjmp	.+8      	; 0x39e <MainLogic+0xd8>
	// ADC read function(10bit);
	AdcInputsread();
	//AC switch priority;
	while (switchOn && (timeCounter>=DEBOUNCE) && (hours<AC_SWITCHOFF_DELAY))
	{
		PORTB |=(1<<BULB);
 396:	c3 9a       	sbi	0x18, 3	; 24
 398:	ad cf       	rjmp	.-166    	; 0x2f4 <MainLogic+0x2e>
 39a:	c3 9a       	sbi	0x18, 3	; 24
 39c:	ab cf       	rjmp	.-170    	; 0x2f4 <MainLogic+0x2e>
						{
							PORTB &=~(1<<BULB);
						}
	
	
}
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <main>:
}


int main(void)
{
	MCU_init();
 3a2:	69 df       	rcall	.-302    	; 0x276 <MCU_init>

	while (1)
	{

		//Main logic function;
		MainLogic();
 3a4:	90 df       	rcall	.-224    	; 0x2c6 <MainLogic>
		
	}
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <main+0x2>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
